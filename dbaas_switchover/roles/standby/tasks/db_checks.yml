---
# db_checks.yml
# Undertake basic db validation

- name: "db_checks 1. create directory {{ script_dir }}"
  action: file dest={{ script_dir }} state=directory owner=oracle group=oinstall
  tags:
    - precheck

- name: db_checks 2. scripts - copy
  copy: src=files/{{ item }} dest={{ script_dir }} owner=oracle group=oinstall mode=0700
  with_items:
   - db_details.sh
   - db_details.sql
   - restart_db.sh
   - restart_db.sql
  tags:
    - precheck
    - test
    - upload

- name: "db_checks 3. instance found check {{ sid_pattern }}"
  action: shell ps -aef | grep pmon | awk -F_ '{print $3}' | grep -v "^$"  | sort -n | sed s/" "//g | grep -i "{{ sid_pattern }}"
  register: oracle_sid
#  failed_when:  oracle_sid.stdout|trim  == '' or "{{ sid_pattern }}" not in oracle_sid.stdout
  failed_when:  oracle_sid.stdout|trim  == ''
  changed_when: False
  tags:
    - precheck
    - test

- name: db_checks 4. display oracle_sid
  debug:
    msg:
      - " oracle_sid: {{ oracle_sid.stdout }}"
  tags:
    - test
    - precheck

- name: db_checks 5. Execute sql script "{{ script_dir }}/db_details.sh  {{ oracle_sid.stdout }} "
  script:
    cmd: ./db_details.sh {{ oracle_sid.stdout }}
    chdir: "{{ script_dir }}"
  register: db_details
  failed_when: db_details.rc >= 1
  debugger: on_failed
  tags:
    - test
    - precheck

- name: db_checks 6. set standby_oracle_sid
  set_fact:
    standby_oracle_sid: "{{ db_details.stdout.split(':')[1] }}"
  tags:
    - always
    - precheck

- name: db_checks 7. set db_unique_name
  set_fact:
    db_unique_name: "{{  db_details.stdout.split(':')[2] }}"
  tags:
    - always
    - precheck

- name: db_checks 8. set database_role
  set_fact:
    database_role: "{{  db_details.stdout.split(':')[4] }}"
  tags:
    - always
    - precheck

- name: db_checks 9. set switchover_status
  set_fact:
    switchover_status: "{{  db_details.stdout.split(':')[5] }}"
  tags:
    - always
    - precheck

- name: db_checks 10. set restart_time_mins
  set_fact:
    restart_time_mins: "{{  db_details.stdout.split(':')[7] }}"
  tags:
    - always
    - precheck
    -
- name: db_checks 11. display db_details
  debug:
    msg:
      - "{{ standby_oracle_sid }}"    #oracle_sid
      #- "{{  db_details.stdout.split(':')[2]  }}"   #db_unique_name
      - "{{ db_unique_name }}"
      - "{{ db_details.stdout.split(':')[3]  }}"   #open_mode
      #- "{{ db_details.stdout.split(':')[4]  }}"   #database_role
      - "{{ database_role }}" #PRIMARY/ PHYSICAL STANDBY
      #- "{{ db_details.stdout.split(':')[5]  }}"   #SWITCHOVER_STATUS
      - "{{ switchover_status }}"
      - "{{ db_details.stdout.split(':')[6]  }}"   #DATAGUARD_BROKER
      - "{{ restart_time_mins }}"
      - "{{ is_rac }}"        #yes/no
  tags:
    - test
    - precheck


- name: db_checks 12. validate "{{ database_role }}" is standby?
  fail: msg="ERROR - db state not standby - {{ database_role }} "
  when: "'PHYSICAL STANDBY' not in database_role"
  tags:
    - always
    - precheck



...
