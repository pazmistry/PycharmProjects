---
#ansible-playbook -i hosts.ini  --tags precheck delme.yml
- hosts: primary_host
  remote_user: oracle
  gather_facts: false
  vars:
    u01_size_gb: 10
    tmp_size_gb: 1
    oracle_base: /u01/app/oracle/
    oracle_home: /u01/app/oracle/product/version/db_1
    tmp_base: /tmp
    oratab_name: /etc/oratab
    script_dir: /u01/app/oracle/scripts
    db_unique_name: template
    ld_library_path: "{{ oracle_home }}/lib"
    #  sid_pattern: orcl
    #  remote_user: oracle


# convert global variables to local variables
# restart the dataabse
# wait util online
# check status

  tasks:
  - name: variables exist check
    fail: msg="{{ item }} is not defined"
    when: "{{ item }} is not defined"
    tags:
      - always
    with_items:
      - u01_size_gb
      - tmp_size_gb
      - oracle_base
      - oracle_home
      - ld_library_path
      - tmp_base
      - oratab_name
      - script_dir
      - sid_pattern
      - db_unique_name

  - name: check free disk space  oracle_home
    action: shell df -k {{ oracle_base }} | awk 'END { print $4 }'
    register: u01size
    failed_when: u01size.stdout|int <  u01_size_gb  * 1024 * 1024 
    changed_when: False
    tags:
      - precheck

  - name: check free disk space  tmp
    action: shell df -k {{ tmp_base }} | awk 'END { print $4 }'
    register: tmpsize
    failed_when: tmpsize.stdout|int < tmp_size_gb * 1024 * 1024
    changed_when: False
    tags:
      - precheck

  - name: scripts  create directory
    action: file dest={{ script_dir }} state=directory owner=oracle group=oinstall
    tags:
      - precheck

  - name: scripts - copy
    copy: src=files/{{ item }} dest={{ script_dir }} owner=oracle group=oinstall mode=0644
    with_items:
     - db_details.sh
     - db_details.sql
    tags:
      - precheck
      - test

  - name: db - instance found check
    action: shell ps -aef | grep pmon | awk -F_ '{print $3}' | grep -v "^$"  | sort -n | sed s/" "//g | grep "{{ sid_pattern }}"
    register: oracle_sid
    failed_when:  oracle_sid.stdout|trim  == '' or "{{ sid_pattern }}" not in oracle_sid.stdout
    changed_when: False
    tags:
      - precheck
      - test

#  - set_fact:
#      oracle_sid2 = "{{ pmon_out.stdout }}"

  - name: display oracle_sid
    debug:
      msg:
        - " please display {{ oracle_sid.stdout }}"
    tags:
      - test
      - precheck

  - name: Execute sql script db_detail
    script:
      cmd: ./db_details.sh orclcdb
      chdir: "{{ script_dir }}"
    register: db_details
    tags:
      - test

  - name: display db_details
    debug:
      msg:
        - "{{  db_details.stdout.split(':')[1] | lower }}"
        - "{{  db_details.stdout.split(':')[2] | lower }}"
        - "{{  db_details.stdout.split(':')[3] | lower }}"
    tags:
      - test
      - precheck

  - name: setting mode
    set_fact:
      database_role: "{{  db_details.stdout.split(':')[3] | lower }}"
    tags:
      - always

######### this needs to be changed to standby lteral check ###############
  - name: db_details validation
    fail: msg="not primary"
    when: "'primary' not in database_role"
    tags:
      - always



############# this needs to be ina new file in a role ################
  - name: Execute sql script shutdown
    script:
      cmd: ./db_details.sh orclcdb
      chdir: "{{ script_dir }}"
    register: db_details
    tags:
      - test
